services:
  # -------- infra de dados --------
  zookeeper:
    image: bitnami/zookeeper:3
    environment: [ ALLOW_ANONYMOUS_LOGIN=yes ]
    ports: [ "2181:2181" ]
    networks: [ retail-net ]

  kafka:
    image: bitnami/kafka:3.7
    depends_on: [ zookeeper ]
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports: [ "9092:9092" ]
    networks: [ retail-net ]

  catalog-db:
    image: postgres:16
    environment:
      - POSTGRES_DB=catalogdb
      - POSTGRES_USER=catalog
      - POSTGRES_PASSWORD=catalog
    ports: [ "5433:5432" ]
    networks: [ retail-net ]

  orders-db:
    image: postgres:16
    environment:
      - POSTGRES_DB=ordersdb
      - POSTGRES_USER=orders
      - POSTGRES_PASSWORD=orders
    ports: [ "5434:5432" ]
    networks: [ retail-net ]

  inventory-db:
    image: postgres:16
    environment:
      - POSTGRES_DB=inventorydb
      - POSTGRES_USER=inventory
      - POSTGRES_PASSWORD=inventory
    ports: [ "5435:5432" ]
    networks: [ retail-net ]

  # -------- observabilidade --------
  prometheus:
    image: prom/prometheus:v2.54.1
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: [ "9090:9090" ]
    networks: [ retail-net ]

  grafana:
    image: grafana/grafana:11.1.0
    depends_on: [ prometheus ]
    environment: [ GF_SECURITY_ADMIN_PASSWORD=admin ]
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports: [ "3000:3000" ]
    networks: [ retail-net ]

  jaeger:
    image: jaegertracing/all-in-one:1.57
    environment: [ COLLECTOR_OTLP_ENABLED=true ]
    ports: [ "16686:16686" ]
    networks: [ retail-net ]

  otel-collector:
    image: otel/opentelemetry-collector:0.109.0
    depends_on: [ jaeger ]
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ./otel/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    networks: [ retail-net ]

  # -------- config + gateway --------
  config-server:
    build:
      context: ../services/config-server
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=file:/config
    volumes:
      - "C:/Users/Jardel/Desktop/PROJETOS/SPRING microservices/config:/config:ro"
    ports: [ "8888:8888" ]
    networks: [ retail-net ]

  api-gateway:
    build:
      context: ../services/api-gateway
    depends_on: [ config-server, prometheus, otel-collector ]
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_APPLICATION_NAME=api-gateway
    ports: [ "8080:8080" ]
    networks: [ retail-net ]

  # -------- services --------
  catalog-service:
    build:
      context: ../services/catalog-service
    depends_on: [ config-server, catalog-db, kafka, otel-collector ]
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_APPLICATION_NAME=catalog-service
    networks: [ retail-net ]

  orders-service:
    build:
      context: ../services/orders-service
    depends_on: [ config-server, orders-db, kafka, otel-collector ]
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_APPLICATION_NAME=orders-service
    networks: [ retail-net ]

  inventory-service:
    build:
      context: ../services/inventory-service
    depends_on: [ config-server, inventory-db, kafka, otel-collector ]
    environment:
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_APPLICATION_NAME=inventory-service
    networks: [ retail-net ]

networks:
  retail-net:
    driver: bridge
